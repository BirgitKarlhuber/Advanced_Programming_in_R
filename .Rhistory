w=c(7,9,14,7,10,15,9,10,11,2,15,11,6,6,9,14,2,9))
dijkstra(wiki_graph, 1)
dijkstra <- function(graph, init_node){
stopifnot(is.data.frame(graph))
num_nodes <- length(unique(graph[[2]])) # get the number of nodes/vertex
# create a matrix of the distances
data <- matrix(Inf,nrow = num_nodes, ncol = num_nodes)
diag(data) <- 0
for(i in 1:nrow(graph)){
data[graph$v1[i],graph$v2[i]] <- graph$w[i]
}
# initialize vectors for shortest distance and previously visited
dist <- rep(Inf,nrow(data))
prev <- rep(FALSE, nrow(data))
dist[init_node] <- 0 # distance from the starting node to itself - zero
cat(dist)
repeat{
# find node with the currently shortest distance from the initial node
short_dist <- Inf
short_index <- -1
for(i in 1:nrow(graph)) {
if(dist[i] < short_dist && !prev[i]){
short_dist <- dist[i]
short_index <- i
}
}
cat(short_index)
if(short_index == -1){
# we already visited all nodes -> return dist-vector
return(dist)
break
} else {
# for all neighbor-nodes we have not visited so far
for(i in 1:nrow((data[short_index,]))) {
if(data[short_index,i] != 0 && dist[i] > (dist[short_index] + data[short_index,i])){
dist[i] = dist[short_index] + data[short_index,i] # this is the new shortest path
}
prev[short_index] = TRUE # set "prev" to TRUE for the current node
}
}
}
}
wiki_graph <- data.frame(v1=c(1,1,1,2,2,2,3,3,3,3,4,4,4,5,5,6,6,6),
v2=c(2,3,6,1,3,4,1,2,4,6,2,3,5,4,6,1,3,5),
w=c(7,9,14,7,10,15,9,10,11,2,15,11,6,6,9,14,2,9))
dijkstra(wiki_graph, 1)
euclidean <- function(x,y){
stopifnot(is.numeric(x), is.numeric(y))
while (x != y){
if (x>y) x = x - y
else y = y - x
}
return(x)
}
eulidean(10,20)
euclidean(10,20)
euclidean(10.3,20)
euclidean(-10,20)
euclidean <- function(x,y){
stopifnot(is.numeric(x), is.numeric(y), x>0, y>0)
while (x != y){
if (x>y) x = x - y
else y = y - x
}
return(x)
}
euclidean(-10,20)
euclidean <- function(x,y){
stopifnot(is.integer(x), is.numeric(y), x>0, y>0)
while (x != y){
if (x>y) x = x - y
else y = y - x
}
return(x)
}
euclidean(-10,20)
euclidean(10,20)
dijkstra(wiki_graph, 1)
dijkstra <- function(graph, init_node){
stopifnot(is.data.frame(graph))
num_nodes <- length(unique(graph[[2]])) # get the number of nodes/vertex
# create a matrix of the distances
data <- matrix(Inf,nrow = num_nodes, ncol = num_nodes)
diag(data) <- 0
for(i in 1:nrow(graph)){
data[graph$v1[i],graph$v2[i]] <- graph$w[i]
}
# initialize vectors for shortest distance and previously visited
dist <- rep(Inf,nrow(data))
prev <- rep(FALSE, nrow(data))
dist[init_node] <- 0 # distance from the starting node to itself - zero
cat(dist)
repeat{
# find node with the currently shortest distance from the initial node
short_dist <- Inf
short_index <- -1
cat(short_index "ddd")
wiki_graph <- data.frame(v1=c(1,1,1,2,2,2,3,3,3,3,4,4,4,5,5,6,6,6),
v2=c(2,3,6,1,3,4,1,2,4,6,2,3,5,4,6,1,3,5),
w=c(7,9,14,7,10,15,9,10,11,2,15,11,6,6,9,14,2,9))
dijkstra(wiki_graph, 1)
dijkstra <- function(graph, init_node){
stopifnot(is.data.frame(graph))
num_nodes <- length(unique(graph[[2]])) # get the number of nodes/vertex
# create a matrix of the distances
data <- matrix(Inf,nrow = num_nodes, ncol = num_nodes)
diag(data) <- 0
for(i in 1:num_nodes){
data[graph$v1[i],graph$v2[i]] <- graph$w[i]
}
# initialize vectors for shortest distance and previously visited
dist <- rep(Inf,nrow(data))
prev <- rep(FALSE, nrow(data))
dist[init_node] <- 0 # distance from the starting node to itself - zero
cat(dist)
repeat{
# find node with the currently shortest distance from the initial node
short_dist <- Inf
short_index <- -1
cat(short_index "ddd")
wiki_graph <- data.frame(v1=c(1,1,1,2,2,2,3,3,3,3,4,4,4,5,5,6,6,6),
v2=c(2,3,6,1,3,4,1,2,4,6,2,3,5,4,6,1,3,5),
w=c(7,9,14,7,10,15,9,10,11,2,15,11,6,6,9,14,2,9))
dijkstra(wiki_graph, 1)
dijkstra <- function(graph, init_node){
stopifnot(is.data.frame(graph))
num_nodes <- length(unique(graph[[2]])) # get the number of nodes/vertex
# create a matrix of the distances
data <- matrix(Inf,nrow = num_nodes, ncol = num_nodes)
diag(data) <- 0
for(i in 1:num_nodes){
data[graph$v1[i],graph$v2[i]] <- graph$w[i]
}
# initialize vectors for shortest distance and previously visited
dist <- rep(Inf,nrow(data))
prev <- rep(FALSE, nrow(data))
dist[init_node] <- 0 # distance from the starting node to itself - zero
cat(dist)
repeat{
# find node with the currently shortest distance from the initial node
short_dist <- Inf
short_index <- -1
for(i in 1:num_nodes) {
if(dist[i] < short_dist && !prev[i]){
short_dist <- dist[i]
short_index <- i
}
}
cat(short_index)
cat(short_dist)
if(short_index == -1){
# we already visited all nodes -> return dist-vector
return(dist)
break
} else {
# for all neighbor-nodes we have not visited so far
for(i in 1:nrow((data[short_index,]))) {
if(data[short_index,i] != 0 && dist[i] > (dist[short_index] + data[short_index,i])){
dist[i] = dist[short_index] + data[short_index,i] # this is the new shortest path
}
prev[short_index] = TRUE # set "prev" to TRUE for the current node
}
}
}
}
wiki_graph <- data.frame(v1=c(1,1,1,2,2,2,3,3,3,3,4,4,4,5,5,6,6,6),
v2=c(2,3,6,1,3,4,1,2,4,6,2,3,5,4,6,1,3,5),
w=c(7,9,14,7,10,15,9,10,11,2,15,11,6,6,9,14,2,9))
dijkstra(wiki_graph, 1)
dijkstra <- function(graph, init_node){
stopifnot(is.data.frame(graph))
num_nodes <- length(unique(graph[[2]])) # get the number of nodes/vertex
# create a matrix of the distances
data <- matrix(Inf,nrow = num_nodes, ncol = num_nodes)
diag(data) <- 0
for(i in 1:num_nodes){
data[graph$v1[i],graph$v2[i]] <- graph$w[i]
}
# initialize vectors for shortest distance and previously visited
dist <- rep(Inf,nrow(data))
prev <- rep(FALSE, nrow(data))
dist[init_node] <- 0 # distance from the starting node to itself - zero
cat(dist)
repeat{
# find node with the currently shortest distance from the initial node
short_dist <- Inf
short_index <- -1
for(i in 1:num_nodes) {
if(dist[i] < short_dist && !prev[i]){
short_dist <- dist[i]
short_index <- i
}
}
cat(short_dist)
cat(short_index)
if(short_index == -1){
# we already visited all nodes -> return dist-vector
return(dist)
break
} else {
# for all neighbor-nodes we have not visited so far
for(i in 1:nrow((data[short_index,]))) {
if(data[short_index,i] != 0 && dist[i] > (dist[short_index] + data[short_index,i])){
dist[i] = dist[short_index] + data[short_index,i] # this is the new shortest path
}
prev[short_index] = TRUE # set "prev" to TRUE for the current node
}
}
}
}
wiki_graph <- data.frame(v1=c(1,1,1,2,2,2,3,3,3,3,4,4,4,5,5,6,6,6),
v2=c(2,3,6,1,3,4,1,2,4,6,2,3,5,4,6,1,3,5),
w=c(7,9,14,7,10,15,9,10,11,2,15,11,6,6,9,14,2,9))
dijkstra(wiki_graph, 1)
graph <- wiki_graph
init_node <- 1
num_nodes <- length(unique(graph[[2]])) # get the number of nodes/vertex
# create a matrix of the distances
data <- matrix(Inf,nrow = num_nodes, ncol = num_nodes)
diag(data) <- 0
for(i in 1:num_nodes){
data[graph$v1[i],graph$v2[i]] <- graph$w[i]
}
# initialize vectors for shortest distance and previously visited
dist <- rep(Inf,nrow(data))
prev <- rep(FALSE, nrow(data))
dist[init_node] <- 0 # distance from the starting node to itself - zero
# find node with the currently shortest distance from the initial node
short_dist <- Inf
short_index <- -1
for(i in 1:num_nodes) {
if(dist[i] < short_dist && !prev[i]){
short_dist <- dist[i]
short_index <- i
}
}
short_index
short_dist
data[short_index,])
data[short_index,]
ncol((data[short_index,])
ncol((data[short_index,]))
ncol(data[short_index,])
length(data[short_index,])
dijkstra <- function(graph, init_node){
stopifnot(is.data.frame(graph))
num_nodes <- length(unique(graph[[2]])) # get the number of nodes/vertex
# create a matrix of the distances
data <- matrix(Inf,nrow = num_nodes, ncol = num_nodes)
diag(data) <- 0
for(i in 1:num_nodes){
data[graph$v1[i],graph$v2[i]] <- graph$w[i]
}
# initialize vectors for shortest distance and previously visited
dist <- rep(Inf,nrow(data))
prev <- rep(FALSE, nrow(data))
dist[init_node] <- 0 # distance from the starting node to itself - zero
cat(dist)
repeat{
# find node with the currently shortest distance from the initial node
short_dist <- Inf
short_index <- -1
for(i in 1:num_nodes) {
if(dist[i] < short_dist && !prev[i]){
short_dist <- dist[i]
short_index <- i
}
}
cat(short_dist)
cat(short_index)
if(short_index == -1){
# we already visited all nodes -> return dist-vector
return(dist)
break
} else {
# for all neighbor-nodes we have not visited so far
for(i in 1:length(data[short_index,])) {
if(data[short_index,i] != 0 && dist[i] > (dist[short_index] + data[short_index,i])){
dist[i] = dist[short_index] + data[short_index,i] # this is the new shortest path
}
prev[short_index] = TRUE # set "prev" to TRUE for the current node
}
}
}
}
wiki_graph <- data.frame(v1=c(1,1,1,2,2,2,3,3,3,3,4,4,4,5,5,6,6,6),
v2=c(2,3,6,1,3,4,1,2,4,6,2,3,5,4,6,1,3,5),
w=c(7,9,14,7,10,15,9,10,11,2,15,11,6,6,9,14,2,9))
dijkstra(wiki_graph, 1)
dijkstra <- function(graph, init_node){
stopifnot(is.data.frame(graph))
num_nodes <- length(unique(graph[[2]])) # get the number of nodes/vertex
# create a matrix of the distances
data <- matrix(Inf,nrow = num_nodes, ncol = num_nodes)
diag(data) <- 0
for(i in 1:num_nodes){
data[graph$v1[i],graph$v2[i]] <- graph$w[i]
}
# initialize vectors for shortest distance and previously visited
dist <- rep(Inf,nrow(data))
prev <- rep(FALSE, nrow(data))
dist[init_node] <- 0 # distance from the starting node to itself - zero
repeat{
# find node with the currently shortest distance from the initial node
short_dist <- Inf
short_index <- -1
for(i in 1:num_nodes) {
if(dist[i] < short_dist && !prev[i]){
short_dist <- dist[i]
short_index <- i
}
}
if(short_index == -1){
# we already visited all nodes -> return dist-vector
return(dist)
break
} else {
# for all neighbor-nodes we have not visited so far
for(i in 1:length(data[short_index,])) {
if(data[short_index,i] != 0 && dist[i] > (dist[short_index] + data[short_index,i])){
dist[i] = dist[short_index] + data[short_index,i] # this is the new shortest path
}
prev[short_index] = TRUE # set "prev" to TRUE for the current node
}
}
}
}
wiki_graph <- data.frame(v1=c(1,1,1,2,2,2,3,3,3,3,4,4,4,5,5,6,6,6),
v2=c(2,3,6,1,3,4,1,2,4,6,2,3,5,4,6,1,3,5),
w=c(7,9,14,7,10,15,9,10,11,2,15,11,6,6,9,14,2,9))
dijkstra(wiki_graph, 1)
dijkstra(wiki_graph, 3)
dijkstra <- function(graph, init_node){
stopifnot(is.data.frame(graph))
num_nodes <- length(unique(graph[[2]])) # get the number of nodes/vertex
# create a matrix of the distances
data <- matrix(Inf,nrow = num_nodes, ncol = num_nodes)
diag(data) <- 0
for(i in 1:num_nodes){
data[graph$v1[i],graph$v2[i]] <- graph$w[i]
}
# initialize vectors for shortest distance and previously visited
dist <- rep(Inf,nrow(data))
prev <- rep(FALSE, nrow(data))
dist[init_node] <- 0 # distance from the starting node to itself - zero
repeat{
# find node with the currently shortest distance from the initial node
short_dist <- Inf
short_index <- -1
for(i in 1:num_nodes) {
if(dist[i] < short_dist && !prev[i]){
short_dist <- dist[i]
short_index <- i
}
}
if(short_index == -1){
# we already visited all nodes -> return dist-vector
return(dist)
break
} else {
# for all neighbor-nodes we have not visited so far
for(i in 1:length(data[short_index,])) {
if(data[short_index,i] != 0 && dist[i] > (dist[short_index] + data[short_index,i])){
dist[i] = dist[short_index] + data[short_index,i] # this is the new shortest path
}
prev[short_index] = TRUE # set "prev" to TRUE for the current node
}
}
}
}
wiki_graph <- data.frame(v1=c(1,1,1,2,2,2,3,3,3,3,4,4,4,5,5,6,6,6),
v2=c(2,3,6,1,3,4,1,2,4,6,2,3,5,4,6,1,3,5),
w=c(7,9,14,7,10,15,9,10,11,2,15,11,6,6,9,14,2,9))
dijkstra(wiki_graph, 1)
graph <- wiki_graph
init_node <- 1
num_nodes <- length(unique(graph[[2]])) # get the number of nodes/vertex
# create a matrix of the distances
data <- matrix(Inf,nrow = num_nodes, ncol = num_nodes)
diag(data) <- 0
for(i in 1:num_nodes){
data[graph$v1[i],graph$v2[i]] <- graph$w[i]
}
data
a
wiki_graph <- data.frame(v1=c(1,1,1,2,2,2,3,3,3,3,4,4,4,5,5,6,6,6),
v2=c(2,3,6,1,3,4,1,2,4,6,2,3,5,4,6,1,3,5),
w=c(7,9,14,7,10,15,9,10,11,2,15,11,6,6,9,14,2,9))
wiki_graph
graph <- wiki_graph
init_node <- 1
num_nodes <- length(unique(graph[[2]])) # get the number of nodes/vertex
num_nodes
# create a matrix of the distances
data <- matrix(Inf,nrow = num_nodes, ncol = num_nodes)
data
diag(data) <- 0
data
for(i in 1:num_nodes){
data[graph$v1[i],graph$v2[i]] <- graph$w[i]
}
data
nrow(graph)
for(i in 1:nrow(graph)){
data[graph$v1[i],graph$v2[i]] <- graph$w[i]
}
data
dijkstra <- function(graph, init_node){
stopifnot(is.data.frame(graph))
num_nodes <- length(unique(graph[[2]])) # get the number of nodes/vertex
# create a matrix of the distances
data <- matrix(Inf,nrow = num_nodes, ncol = num_nodes)
diag(data) <- 0
for(i in 1:nrow(graph)){
data[graph$v1[i],graph$v2[i]] <- graph$w[i]
}
# initialize vectors for shortest distance and previously visited
dist <- rep(Inf,nrow(data))
prev <- rep(FALSE, nrow(data))
dist[init_node] <- 0 # distance from the starting node to itself - zero
repeat{
# find node with the currently shortest distance from the initial node
short_dist <- Inf
short_index <- -1
for(i in 1:num_nodes) {
if(dist[i] < short_dist && !prev[i]){
short_dist <- dist[i]
short_index <- i
}
}
if(short_index == -1){
# we already visited all nodes -> return dist-vector
return(dist)
break
} else {
# for all neighbor-nodes we have not visited so far
for(i in 1:length(data[short_index,])) {
if(data[short_index,i] != 0 && dist[i] > (dist[short_index] + data[short_index,i])){
dist[i] = dist[short_index] + data[short_index,i] # this is the new shortest path
}
prev[short_index] = TRUE # set "prev" to TRUE for the current node
}
}
}
}
wiki_graph <- data.frame(v1=c(1,1,1,2,2,2,3,3,3,3,4,4,4,5,5,6,6,6),
v2=c(2,3,6,1,3,4,1,2,4,6,2,3,5,4,6,1,3,5),
w=c(7,9,14,7,10,15,9,10,11,2,15,11,6,6,9,14,2,9))
dijkstra(wiki_graph, 1)
dijkstra(wiki_graph, 3)
usethis::use_github_action_check_standard()
usethis::use testthat()
usethis::use_testthat()
cd ~/GitHub\Advanced_Programming_in_R
cd ~\GitHub\Advanced_Programming_in_R
cd ~/GitHub/dvanced_Programming_in_R
cd ~\GitHub\Advanced_Programming_in_R
sessionInfo()
Sys.getlocale()
Sys.setenv(LANG = "en")
install.packages("testthat")
# lab 2
library(markmyassignment)
lab_path <- "https://raw.githubusercontent.com/STIMALiU/AdvRCourse/master/Labs/Tests/lab2.yml"
set_assignment(lab_path)
source("Lab2_Birgit_Karlhuber.R")
getwd()
setwd("C:\Users\Birgit\University\Master\3.Semester_Auslandssemester\2_Aufgaben_WÄHREND\Advanced_Programming_in_R\2_week")
setwd("C:/Users/Birgit/University/Master/3.Semester_Auslandssemester/2_Aufgaben_WÄHREND/Advanced_Programming_in_R/2_week")
source("Lab2_Birgit_Karlhuber.R")
mark_my_assignment("my_moving_median")
# lab 2
library(markmyassignment)
lab_path <- "https://raw.githubusercontent.com/STIMALiU/AdvRCourse/master/Labs/Tests/lab2.yml"
set_assignment(lab_path)
setwd("C:/Users/Birgit/University/Master/3.Semester_Auslandssemester/2_Aufgaben_WÄHREND/Advanced_Programming_in_R/2_week")
source("Lab2_Birgit_Karlhuber.R")
mark_my_assignment("my_moving_median")
mark_my_assignment("sheldon_game")
source("Lab2_Birgit_Karlhuber.R")
mark_my_assignment()
ss <- c(TRUE,4)
ss
ss <- rep(TRUE,4)
ss
all(ss)
""
wiki_graph <- data.frame(v1=c(1,1,1,2,2,2,3,3,3,3,4,4,4,5,5,6,6,6),
#' v2=c(2,3,6,1,3,4,1,2,4,6,2,3,5,4,6,1,3,5),
#' w=c(7,9,14,7,10,15,9,10,11,2,15,11,6,6,9,14,2,9))
wiki_graph <- data.frame(v1=c(1,1,1,2,2,2,3,3,3,3,4,4,4,5,5,6,6,6),
v2=c(2,3,6,1,3,4,1,2,4,6,2,3,5,4,6,1,3,5),
w=c(7,9,14,7,10,15,9,10,11,2,15,11,6,6,9,14,2,9))
usethis::use_data(wiki_graph)
wiki_graph <- data.frame(v1=c(1,1,1,2,2,2,3,3,3,3,4,4,4,5,5,6,6,6), v2=c(2,3,6,1,3,4,1,2,4,6,2,3,5,4,6,1,3,5), w=c(7,9,14,7,10,15,9,10,11,2,15,11,6,6,9,14,2,9))
usethis::use_data(wiki_graph)
setwd("C:/Users/Birgit/Documents/GitHub/Advanced_Programming_in_R")
wiki_graph <- data.frame(v1=c(1,1,1,2,2,2,3,3,3,3,4,4,4,5,5,6,6,6), v2=c(2,3,6,1,3,4,1,2,4,6,2,3,5,4,6,1,3,5), w=c(7,9,14,7,10,15,9,10,11,2,15,11,6,6,9,14,2,9))
usethis::use_data(wiki_graph)
wiki_graph <- data.frame(v1=c(1,1,1,2,2,2,3,3,3,3,4,4,4,5,5,6,6,6), v2=c(2,3,6,1,3,4,1,2,4,6,2,3,5,4,6,1,3,5), w=c(7,9,14,7,10,15,9,10,11,2,15,11,6,6,9,14,2,9))
names(wiki_graph)
names(wiki_graph) == c("v1","v2","w")
names(wiki_graph) == c("v1","v3","w")
all(names(wiki_graph) == c("v1","v3","w"))
wiki_graph <- data.frame(v1=c(1,1,1,2,2,2,3,3,3,3,4,4,4,5,5,6,6,6),
v2=c(2,3,6,1,3,4,1,2,4,6,2,3,5,4,6,1,3,5),
w=c(7,9,14,7,10,15,9,10,11,2,15,11,6,6,9,14,2,9))
wiki_wrong_graph <- wiki_graph
names(wiki_wrong_graph) <- c("v1, v3, w")
wiki_wrong_graph <- wiki_graph[1:2]
wiki_wrong_graph
ncol(wiki_wrong_graph)
